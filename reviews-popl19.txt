POPL 2019 Paper #18 Reviews and Comments
===========================================================================
Paper #18 Live Functional Programming with Typed Holes


Review #18A
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
This paper presents the formalization of Hazel, a functional programming
language supporting so-called "live programming", which provides continuous
feedback about the program's execution, even when the program is incomplete or
contains type errors. The semantics of incomplete programs is defined using the
concept of holes. Specifically, the formalism employs two kinds of holes: (A)
empty holes for missing program parts and (B) non-empty holes for type-incorrect
subexpressions and defines the semantics to evaluate expressions "around the
holes".

Strengths
---------
The paper convincingly argues for the need for live programming languages.

The formalism adequately reflects the nature of incomplete and partially
type-incorrect programs and their partial dynamic semantics. Specifically, the
two notions of holes and their associated concepts of hole closures,
fill-and-resume, etc. appear to be the proper abstractions to capture the nature
of the live programming model.

Weaknesses
----------
The paper lacks a discussion of the question of scalability. The example in
Figure 1 contains a list of 3 elements. What happens in situations when lists
get really big, with, say, thousands of elements? Do you construct hole closures
for all elements? How does that affect the memory footprint of programs and also
their runtime? While a comprehensive analysis is probably beyond the scope of
the current paper, this question should at least be discussed briefly, since the
implementation plays a prominent role in the motivation of the paper.

Comments for author
-------------------
Typos

L205: Thusfar -> Thus far

L221: the result as a hole -> the result as a whole (I think)

L374: allows the programmer confirm -> allows the programmer to confirm



Review #18B
===========================================================================

Overall merit
-------------
A. Strong Accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
This paper develops a dynamic semantics for pure functional programs with holes. In this way, it seeks to solve the so-called gap problem, i.e. the problem that arises from programming languages typically assigning dynamic semantics to programs that are complete, in the sense of being well-formed and type-error free. The gap problem inhibits a system's ability to provide programmers with continuous feedback about programs' dynamic behavior during editing. Being able to do so would make program development easier, and would be especially useful for rapid prototyping and, as the authors convincingly demonstrate with their examples, teaching.

Strengths
---------
The paper is well-motivated, and represents progress toward solving the important real-world programming problem of providing the user helpful feedback for debugging when live pure functional programming. The paper is also well-written, both at the large scale (the paper is nicely organized, its logic is clear) and at the smaller scale (the paper is well-written, the technical explanations are remarkably clear given the space constraints). The work is well-situated with respect to that in the related literature. Overall, I enjoyed reading the paper.

Weaknesses
----------
My only real complaints are that no proofs /at all/ are included in the main paper at all, and that even the definitions of some of the technical notions referred to get rather sketchy toward the end. A concrete example is in the discussion after Theorem 4.2, where the critical idea that "evaluation order does not matter" arises but is not made precise.

Comments for author
-------------------
I have only one large-scale comment: When discussing the related literature you remind the reader that only pure functional languages are considered in this paper, and also make it clear that this is the first step in a long research program. I think it would be good to emphasize both of these points in the introduction.

Small comments:

On page 11: I did not understand how the matching relation avoids the need for two separate rules (or even what, specifically, you mean by this).

On page 15: what is an "essentially standard notion" of type safety?

In several places starting on page 15: "disequal"? Do you mean "unequal"? Or do you mean something else? If the latter, then please define what is meant.

On page 16: Is there a reason you do not state Finality as "If d final then there exists no d' such that d |-> d'"? Surely this must be the say that the theorem is used.

On page 17: Why does evaluation not stop if a cast fails. Shouldn't evaluation await the programmer in this case?

On page 19: Does "X complete" just mean that "X is not indeterminate"? Or do you mean something other? If the latter, then please define what is meant.

On page 19: The conclusion of Theorem 3.12 should be that "either there exists a d' such that d |-> d' or d val".

On page 20: more editor states are meaningful? More that what?
 
On page 22: "operation that respects" -> "operation that respect"

The reference "Jones et al." should be "Peyton Jones et al."

Other references are incomplete (e.g. Garcia and Cimini) and not all are presented consistently with the others.

Questions for authors’ response
---------------------------------
Can you please respond to small comments 1, 5, and 6 above? Of these, I'm most interested in 6.



Review #18C
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
The paper introduces and formalizes Hazelnut Live, a core calculus that gives meaning to incomplete or untyped functional programs. An overview of the system is presented using some toy examples that describe an interactive editor that runs incomplete programs. Then the core calculus is formalized: term expansion and its metatheory ensures type preservation, dynamic semantics use the CMTT theory to evaluate holes under closures and finally, preservation and progress is stated.

Strengths
---------
- The paper uses ideas from the well developed areas of CMTT and gradual typing to give meanings to incomplete and untyped functional programs. 
- The writing is great: the goal of the paper is very well motivated (during programming indeed most of the times programs are incomplete and untyped, thus lack meaning). 
- The dynamic semantics (due to CMTT style) continue evaluation even under holes. 
- There is both mechanized metatheory and implementation.

Weaknesses
----------
- The examples presented in the paper are toy: the user can easily fix the presented programs without really a need for Hazelnut Live, thus real world examples and benchmarks would be more convincing. 
- Similarly, a user study seems to be needed to evaluate the claim made in this paper that Hazelnut Live aids program development.

Comments for author
-------------------
I really liked the paper and its contributions! The authors target an important problem of explaining incomplete and untyped programs and they do it using well established existing theories (of gradual typing and CMTT). I found the idea of continuing program execution under holes really useful (instead of throwing an exception as in gradual types). 

My only concern for acceptance is that even thought the theoretical contributions of this paper are great, the overview of this paper reads more like an implementation paper. Which is fine, but made me expect that Hazelnut Live has been used in practice and that a user study of real benchmarks would be available. 

In short, even though I found the technical contribution of this paper strong, I think the overview should be rewritten with this in mind, instead of exposing a prototype UI and toy examples.

Questions for authors’ response
---------------------------------
- When, if even, does type checking of the initial program fail?
- Is the algorithm incremental/differential? Can it actually be used for real time programming? Term expansion and type checking from the theory seem slow, so I would like to see a discussion on whether or not this procedures can actually run online (at programming time) and if it is possible to be used for programs larger than the ones presented here.



Review #18D
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
The paper presents the dynamic semantics for incomplete programs, for
a functional language named Hazel. The programs may be incomplete in
several different ways: they may have missing expressions, missing
type annotations, static type errors, or they may encounter dynamic
type errors. The idea is that the dynamic semantics continues as much
as possible in the face of such incompleteness. The way it handles
missing expressions, called holes, is similar to the way variables are
treated in a partial evaluator... they are treated like ``residual''
expressions, and when the program applies operations to residual
expressions it creates larger residual expressions. The way the paper
handles missing type annotations in inspired by gradual type systems
and the way it handles dynamic type errors is inspired by the cast
calculi that underly gradually typed languages, except that failed
casts do not trigger an exception, but instead are treated like holes,
as described above. Static type errors are also treated like holes
that contain an expression, that is, there is a boundary between the
context and the contained expression. Evaluation can occur inside and
outside of the boundary, but there is no interaction between the inner
expression and the context.

The paper defines an external and internal language, an expansion from
one to the other, and gives a dynamic semantics to the internal
language. The paper proves that expansion is type preserving and that
the internal language is type safe. It also proves that a kind of
progress theorem for editor actions, called Continuity.  The paper
also formalizes fill-and-resume, proves that filling is type
preserving and that filling commutes with reduction.

Strengths
---------
+ The paper presents a nice design for improving live programming
  environments, enabling program execution to proceed as far as
  possible, providing more information to the programmer.

+ The paper is technically solid.

+ The paper is well written.

Weaknesses
----------
- The degree of novelty and the amount of difficulty overcome in the
  paper is not very high.

Comments for author
-------------------
p.2

"it provides no information about the behavior of the remainder of program"
===> missing "the"
"it provides no information about the behavior of the remainder of the program"


p. 13

Section 3.2.1

Why do you borrow typing rules from CMTT? What's the concrete
motivation? What problem that are you solving by using this?  It would
be helpful to answer these questions before diving into the technical
presentation. Is it just to handle fill-and-resume? Perhaps there's
and ordering problem with the current layout of the paper.

p. 14

"First, consider the function position..."
For readers familar with gradual typing, this paragraph is boring.

p. 16

The definition of substitution for non-empty holes is a bit confusing.
Why does the substitution get recorded in the boundary and also
applied to the inner expression? Isn't one of those unnecessary?

p. 19

"We take as assumptions only a few ..."
Tut-tut

p. 22

"(by treating ref(\tau) as invariant with respect to consistency)"

Don't do that! Herman et al. in Space-Efficient Gradual Typing (TFP
2006, HOSC 2010) show how to do it correctly. Also see the discussion
if section 5.2 of the paper Refined Criteria for Gradual Typing (SNAPL
2015).

p. 25

The related work should include a paragraph about similarities
and differences with respect to partial evaluation.
