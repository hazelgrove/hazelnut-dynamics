OOPSLA 2018 Paper #9 Reviews and Comments
===========================================================================
Paper #9 Live Functional Programming with Typed Holes


Review #9A
===========================================================================

Overall merit
-------------
B. Weak accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
This paper presents a dynamic semantics for *incomplete programs*, which naturally arise in structure editors (and arguably in practice in normal coding).  The key idea is to treat stuck terms as first-class values and compute "around" such terms, recording the result of this computation as a pending substitution on a hole. Then, when the programmer provides an edit to a previously stuck term, the system can apply the pending substitution to the edit and "resume" the execution. In this way, the semantics provide a framework in which the system runs "as far as possible", until it cannot proceed with evaluation, and more importantly, precisely categorizes the stuck state such that it can be further fixed and resumed.

The paper builds off previous work defining the static semantics for incomplete functional programs, and moreover presents some mechanized correctness proofs relating the (prior) static semantics and the novel dynamic semantics. The main contributions are the formalized dynamic semantics, the correctness proofs, and a tool implementing the approach.

Comments for author
-------------------
**Strengths**

* As far as I know, the idea of giving dynamic semantics to incomplete programs (where holes can appear anywhere) is novel.
It is also non-trivial: even though the treatment is only provided for a very basic lambda calculus,
there are several subtleties, mostly associated with type holes.
The formalization is worked out in detail and mechanized in Agda.

* The motivation (live programming) is excellent and the screenshots of the tool are quite convincing.

* The paper is very well written, even the technical section reads like a story.


**Weaknesses**

* I generally like the paper, and I think it presents a very solid theoretical foundation for a very interesting research direction (general-purpose live programming).
My only reservation is the gap between what has been formalized and where the truly interesting challenges of live programming begin.
The HazelnutLive calculus in the paper is really basic, it doesn't even have fixpoint.
Perhaps that's okay: we have to start somewhere, and more interesting features will follow.
But I wish the paper had some kind of evaluation section that would at least report on a series of examples
that the authors themselves have implemented and found the live feedback useful.

**Questions for authors**

* I'm still confused about which version of the language is implemented. Are the screenshots in section 2 real, or only the ones in the appendix?

**Minor comments**

* p 15: "an reduction"

* p 17 says "The need for this case is perhaps not obvious, because..." I don't think this sentence actually explains why this case is needed after all.

* p 19: "on the more version of the semantics"

* p 21: "a key feature CMMT"



Review #9B
===========================================================================

Overall merit
-------------
A. Accept

Reviewer expertise
------------------
Y. Knowledgeable

Paper summary
-------------
This paper extends an existing work on live programming environments
by Omar et al. with a dynamic semantics for incomplete functional
programs.  While traditional approaches for incomplete programs are
either rejecting them at compile time or throwing exceptions at run
time, live programming environments let programmers evaluate
incomplete programs by recovering the missing pieces, which lead to
results with some holes.  Omar et al.'s previous work presented a type
system for  live programming and this paper extends it with a dynamic
semantics.  After explaining live functional programming with typed
holes using several concrete examples, the paper formally presents
a core calculus called Hazelnut Live from its syntax, static and
dynamic semantics, mechanization in the Agda proof assistant, and a
browser-based implementation in OCaml.  The paper also discusses how
to incrementally type check a program after filling a hole in it,
firmly grounded by contextual modal type theory (CMTT).

Comments for author
-------------------
The topic of the paper is both interesting and challenging, and this
paper moves the territory of the state-of-the-art forward.  Using
typed holes, the paper presents a dynamic semantics for incomplete
programs.  This approach may provide a theoretical firm ground for
education tools for novices and IDEs with real-time visual feedback,
and it could be practically applicable with the incremental evaluation
feature, fill-and-resume.  By showing type errors before type
checking, even in the middle of inserting code, this approach will
help programmers write better code in terms of less type errors.

This paper is a solid work from its theory to practice.  The problem
is well motivated with concrete code examples, which show the use
scenarios of live programming clearly.  The earlier part of the paper
uses a bit vague terms like "appropriate type", "flickers in and out",
"membranes", and "around the holes", but they become very clear in the
later part of the paper with the formal calculus.  The formal calculus
is well presented, starting from the syntax of both external and
internal languages and the static semantics.  While the static
semantics is very much similar to the previous work by Omar et al.,
the dynamic semantics makes the previous work complete.  The Agda
mechanization of the calculus seems to be standard, which may not
contain technical contributions, but the mechanized proofs and an
actual browser-based implementation in OCaml, though a
proof-of-concept, makes the paper solid and strong.

The paper is well written with concrete examples.  The rules are
clearly explained with high-level descriptions, and it provides
comprehensive related work.

Several rule names are in wrong font such as TAEHole, TANEHole below
Definition 3.5 in page 12, and TACast in page 13.

Typo: In page 12, line 572: "each require that" => "each requires that"



Review #9C
===========================================================================

Overall merit
-------------
C. Weak reject

Reviewer expertise
------------------
X. Expert

Paper summary
-------------
The paper describes the extension of Hazelnut, a language and editor that explicitly represents and type checks incomplete programs (programs with holes), with _execution_ of incomplete programs in order to enable _live programming_ without 'flickering' due to incompleteness. Instead of raising an exception when a hole is encountered during evaluation, the dynamic semantics constructs a closure and reifies the surrounding incomplete computation. The paper defines a static semantics (which is largely that of Hazelnut) and a dynamic semantics for simply-typed lambda calculus with constants and holes.

The approach has been implemented in an extension of the Hazelnut editor (which is provided with the supplementary material, but which is not accessible during review, unfortunately). Section 2 sketches the application of live programming with typed holes for an extension of the calculus formalized in the paper. However, from section 3.5 I understand that this extension has not actually been implemented.

Comments for author
-------------------
The paper is well-written and the formal definition of Hazelnut Live seems sound.

However, I am not convinced by the paper that the approach scales to a usable approach to live programming.

The approach works by reifying incomplete computations. That is, when a hole is encountered, the expression containing it is frozen for later re-evaluation when a value for the hole becomes available. The examples in Section 2 are carefully chosen so that the incomplete expressions are localized, or represent the tail computation. From the final example in 2.4 one gets a glimpse about what happens if the value of a hole determines control-flow; the reified expression blows up. In particular, the calculus lacks recursion and control-flow. Dealing with these efficiently and providing a good user interface for inspecting the resulting reified values is the hard problem in making such an environment. While one can imagine dealing with these issues in the context of a pure functional language by extrapolating from the paper, it is not at all clear how to extend the approach to languages with effects and mutation.

While, the technical development is sound, it is mostly based prior work (Hazelnut type system), or a variation on gradually typed calculi, and not very surprising. In fact, evaluation of expression with holes is akin to evaluation of expressions with free variables extended with type casts from gradual typing.

p24: Why refer to the arxiv version of Omar 2017a if there is an official version?
